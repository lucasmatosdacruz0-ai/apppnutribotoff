

import { GoogleGenAI, Chat, Type } from "@google/genai";
import { DailyPlan, Meal, UserData, MacroData, Recipe, FoodItem } from '../types';

let aiInstance: GoogleGenAI | null = null;

const getAi = (): GoogleGenAI => {
    if (aiInstance) {
        return aiInstance;
    }
    // FIX: As per coding guidelines, the API key must be obtained from process.env.API_KEY. This also resolves the `import.meta.env` error.
    const apiKey = process.env.API_KEY;
    if (!apiKey) {
        throw new Error("API key not configured. Please set the API_KEY environment variable.");
    }
    aiInstance = new GoogleGenAI({ apiKey });
    return aiInstance;
};


// Model for fast, conversational, or simple informational tasks.
const FAST_MODEL = 'gemini-2.5-flash';

// Model for complex data generation (plans, recipes, lists).
// Per user suggestion to use a "lite" model for expensive operations,
// we use 'gemini-2.5-flash' as it's the most cost-effective and fastest official model
// available in the SDK for these high-token tasks.
const DATA_GENERATION_MODEL = 'gemini-2.5-flash';

// Model for image generation tasks.
const IMAGE_GENERATION_MODEL = 'imagen-4.0-generate-001';


let chatInstance: Chat | null = null;

const macroDataSchema = {
    type: Type.OBJECT,
    properties: {
        calories: { type: Type.NUMBER, description: "Total de calorias." },
        carbs: { type: Type.NUMBER, description: "Total de carboidratos em gramas." },
        protein: { type: Type.NUMBER, description: "Total de prote√≠nas em gramas." },
        fat: { type: Type.NUMBER, description: "Total de gorduras em gramas." },
    },
    required: ["calories", "carbs", "protein", "fat"]
};

const activityLogSchema = {
    type: Type.OBJECT,
    properties: {
        type: { type: Type.STRING, description: "O tipo de atividade f√≠sica. Ex: 'Corrida', 'Muscula√ß√£o'." },
        duration: { type: Type.NUMBER, description: "A dura√ß√£o da atividade em minutos." },
        caloriesBurned: { type: Type.NUMBER, description: "O n√∫mero de calorias queimadas." },
    },
    required: ["type", "duration", "caloriesBurned"]
};

const foodItemSchema = {
    type: Type.OBJECT,
    properties: {
        name: { type: Type.STRING, description: "O nome do alimento." },
        portion: { type: Type.STRING, description: "A por√ß√£o do alimento, incluindo a medida caseira e o equivalente em gramas. Ex: '1 x√≠cara (200g)', '2 fatias (50g)'." },
        calories: { type: Type.NUMBER, description: "As calorias estimadas para este alimento." },
        carbs: { type: Type.NUMBER, description: "Carboidratos em gramas." },
        protein: { type: Type.NUMBER, description: "Prote√≠nas em gramas." },
        fat: { type: Type.NUMBER, description: "Gorduras em gramas." },
    },
    required: ["name", "portion", "calories", "carbs", "protein", "fat"]
};

const mealSchema = {
    type: Type.OBJECT,
    properties: {
        id: { type: Type.STRING, description: "Um ID √∫nico para a refei√ß√£o (pode ser o nome da refei√ß√£o em min√∫sculas)." },
        name: { type: Type.STRING, description: "O nome da refei√ß√£o (ex: 'Caf√© da Manh√£')." },
        time: { type: Type.STRING, description: "O hor√°rio da refei√ß√£o (ex: '08:00')." },
        totalCalories: { type: Type.NUMBER, description: "O total de calorias para esta refei√ß√£o (soma das calorias dos itens)." },
        totalMacros: { ...macroDataSchema, description: "O total de macronutrientes para esta refei√ß√£o (soma dos macros dos itens)." },
        items: {
            type: Type.ARRAY,
            description: "A lista de alimentos para esta refei√ß√£o.",
            items: foodItemSchema
        }
    },
    required: ["id", "name", "time", "totalCalories", "totalMacros", "items"]
};

const dailyPlanSchema = {
    type: Type.OBJECT,
    properties: {
        date: { type: Type.STRING, description: "A data do plano no formato AAAA-MM-DD." },
        dayOfWeek: { type: Type.STRING, description: "O nome do dia da semana (ex: 'Segunda-feira')." },
        totalCalories: { type: Type.NUMBER, description: "O total de calorias para o dia todo (soma das calorias das refei√ß√µes)." },
        totalMacros: { ...macroDataSchema, description: "O total de macronutrientes para o dia todo (soma dos macros das refei√ß√µes)." },
        waterGoal: { type: Type.NUMBER, description: "A meta de √°gua em litros. Se n√£o informado, use 2.5." },
        meals: {
            type: Type.ARRAY,
            description: "A lista de refei√ß√µes do dia.",
            items: mealSchema
        }
    },
    required: ["date", "dayOfWeek", "totalCalories", "totalMacros", "waterGoal", "meals"]
};

const weeklyPlanSchema = {
    type: Type.OBJECT,
    properties: {
        weekly_plan: {
            type: Type.ARRAY,
            description: "Uma lista de 7 planos di√°rios, um para cada dia da semana.",
            items: dailyPlanSchema
        }
    },
    required: ['weekly_plan']
};

const recipeSchema = {
    type: Type.OBJECT,
    properties: {
        recipes: {
            type: Type.ARRAY,
            description: "Uma lista de receitas criativas, conforme o n√∫mero solicitado.",
            items: {
                type: Type.OBJECT,
                properties: {
                    id: { type: Type.STRING, description: "Um ID √∫nico para a receita, pode ser o t√≠tulo em kebab-case." },
                    title: { type: Type.STRING, description: "O t√≠tulo da receita." },
                    description: { type: Type.STRING, description: "Uma breve e convidativa descri√ß√£o da receita (2-3 frases)." },
                    prepTime: { type: Type.STRING, description: "O tempo total de preparo estimado. Ex: 'Aprox. 30 min'." },
                    difficulty: { type: Type.STRING, enum: ['F√°cil', 'M√©dio', 'Dif√≠cil'], description: "O n√≠vel de dificuldade." },
                    servings: { type: Type.STRING, description: "O rendimento da receita. Ex: '2 por√ß√µes'." },
                    ingredients: { type: Type.ARRAY, items: { type: Type.STRING }, description: "Lista de ingredientes, incluindo quantidades." },
                    instructions: { type: Type.ARRAY, items: { type: Type.STRING }, description: "Passo-a-passo do modo de preparo." },
                    nutritionalInfo: {
                        type: Type.OBJECT,
                        properties: {
                            calories: { type: Type.STRING, description: "Faixa de calorias por por√ß√£o. Ex: '350-450 kcal'." },
                            protein: { type: Type.STRING, description: "Quantidade de prote√≠na por por√ß√£o. Ex: '30g'." },
                            carbs: { type: Type.STRING, description: "Quantidade de carboidratos por por√ß√£o. Ex: '25g'." },
                            fat: { type: Type.STRING, description: "Quantidade de gordura por por√ß√£o. Ex: '15g'." }
                        },
                        required: ["calories", "protein", "carbs", "fat"]
                    },
                    imagePrompt: { type: Type.STRING, description: "CR√çTICO: Um prompt detalhado e otimizado para um gerador de imagens (como Midjourney ou DALL-E) para criar uma foto realista e apetitosa desta receita. Ex: 'food photography, a juicy grilled salmon fillet on a white plate with roasted asparagus spears and a lemon wedge, professional lighting, macro shot'." }
                },
                required: ["id", "title", "description", "prepTime", "difficulty", "servings", "ingredients", "instructions", "nutritionalInfo", "imagePrompt"]
            }
        }
    },
    required: ["recipes"]
};


export const getChatInstance = (): Chat => {
    if (!chatInstance) {
        const ai = getAi();
        chatInstance = ai.chats.create({
            model: FAST_MODEL,
            config: {
                systemInstruction: `Voc√™ √© o NutriBot, um assistente nutricionista de IA. Suas respostas devem ser em portugu√™s do Brasil, sempre bem estruturadas, claras e agrad√°veis de ler, mas sem usar muitos tokens. Utilize Markdown para formatar suas respostas da seguinte maneira:

- **T√≠tulos e Se√ß√µes:** Use headings (ex: \`## T√≠tulo\`) para organizar o conte√∫do.
- **Destaques:** Use negrito (\`**texto**\`) para enfatizar informa√ß√µes importantes.
- **Listas:** Use listas com marcadores (\`- Item 1\`) para itens como ingredientes ou dicas.
- **Tabelas:** SEMPRE que fornecer uma dieta, lista de compras ou dados comparativos, apresente as informa√ß√µes em uma tabela Markdown para m√°xima clareza.
- **Emojis:** Use emojis de forma moderada e apropriada para tornar a conversa amig√°vel (ü•ë, üí™, üíß).
- **Sele√ß√£o de Alimentos:** Ao sugerir alimentos ou criar planos, d√™ prefer√™ncia a ingredientes que s√£o comuns na dieta brasileira e f√°ceis de encontrar em supermercados no Brasil.
- **Macros e Metas:** Ao criar dietas, esforce-se para atingir as metas de calorias e macronutrientes do usu√°rio.
- **Gramatura:** Sempre inclua a por√ß√£o em gramas junto da medida caseira. Exemplo: "1 x√≠cara de arroz (200g)".

Seja conciso, mas completo, focando em fornecer valor pr√°tico ao usu√°rio.`,
            },
        });
    }
    return chatInstance;
};

export const sendMessageToAI = async (message: string) => {
    const chat = getChatInstance();
    try {
        const result = await chat.sendMessageStream({ message });
        return result;
    } catch (error) {
        console.error("Error sending message to AI:", error);
        throw new Error("N√£o foi poss√≠vel comunicar com a IA. Tente novamente mais tarde.");
    }
};

export const parseMealPlanText = async (text: string): Promise<DailyPlan> => {
    try {
        const ai = getAi();
        const today = new Date();
        const tzoffset = today.getTimezoneOffset() * 60000;
        const localISOTime = (new Date(today.getTime() - tzoffset)).toISOString().split('T')[0];

        const prompt = `Dada a data de hoje (${today.toLocaleDateString('pt-BR')}) e a seguinte dieta em texto markdown, extraia as informa√ß√µes e formate-as em JSON.
        - O campo 'date' DEVE ser a data de hoje no formato AAAA-MM-DD: ${localISOTime}.
        - O campo 'dayOfWeek' DEVE ser o dia da semana em portugu√™s correspondente a essa data (ex: Segunda-feira).
        - O 'id' de cada refei√ß√£o pode ser o nome da refei√ß√£o em min√∫sculas e sem espa√ßos (ex: 'cafedamanha').
        - Calcule os totais de calorias e macronutrientes para cada refei√ß√£o e para o dia todo.
        - Para cada alimento, adicione a medida em gramas se n√£o estiver presente. Ex: "1 fatia de p√£o" deve virar "1 fatia de p√£o (25g)".
        - Se a meta de √°gua n√£o for mencionada, use 2.5 como padr√£o para 'waterGoal'.
        
        Texto da dieta:
        ---
        ${text}
        ---
        `;
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
            config: {
              responseMimeType: "application/json",
              responseSchema: dailyPlanSchema,
              thinkingConfig: { thinkingBudget: 0 },
            },
         });
       
         const jsonText = response.text.trim();
         return JSON.parse(jsonText);

    } catch(error) {
        console.error("Error parsing meal plan with AI:", error);
        throw new Error("N√£o foi poss√≠vel importar a dieta do chat. A IA n√£o conseguiu analisar o texto.");
    }
};

export const regenerateDailyPlan = async (
    userData: UserData, 
    currentPlan: DailyPlan,
    numberOfMeals?: number
): Promise<DailyPlan> => {
    const objective = userData.weight > userData.weightGoal ? 'perda de peso' : userData.weight < userData.weightGoal ? 'ganho de massa' : 'manuten√ß√£o de peso';

    const mealStructurePrompt = numberOfMeals
        ? `- Estrutura: Exatamente ${numberOfMeals} refei√ß√µes logicamente distribu√≠das.`
        : `- Estrutura: Manter a mesma quantidade e nomes de refei√ß√µes do plano anterior.`;

    const difficultyPrompt = userData.dietDifficulty === 'easy' 
        ? `- Modo F√°cil: Priorizar simplicidade e alimentos comuns.`
        : userData.dietDifficulty === 'athlete'
        ? `- Modo Atleta: Dieta rica em prote√≠nas de alta qualidade e carboidratos complexos.`
        : '';
    
    const adminInstructionPrompt = userData.adminSettings?.permanentPrompt
      ? `- Regra Permanente do Nutricionista (OBRIGAT√ìRIO): ${userData.adminSettings.permanentPrompt}`
      : '';

    const userProfileJSON = JSON.stringify({
        idade: userData.age, genero: userData.gender, altura: userData.height, peso: userData.weight,
        atividade: userData.activityLevel,
        objetivo: objective, meta_peso: userData.weightGoal,
        metas_diarias: { calorias: userData.macros.calories.goal, carboidratos: userData.macros.carbs.goal, proteinas: userData.macros.protein.goal, gorduras: userData.macros.fat.goal },
        preferencias: { dietas: userData.dietaryPreferences.diets.join(', ') || 'Nenhuma', restricoes: userData.dietaryPreferences.restrictions.join(', ') || 'Nenhuma' }
    });

    const prompt = `
Tarefa: Gerar um novo plano alimentar de um dia.
Sa√≠da: Apenas o objeto JSON, conforme o schema 'dailyPlanSchema'.
Regras:
- Criativo e diferente do plano anterior.
- Alinhar estritamente com o perfil e metas do usu√°rio.
- Usar alimentos comuns no Brasil.
- Incluir por√ß√µes em formato "medida caseira (gramas)", ex: "1 x√≠cara (200g)".
- Manter date='${currentPlan.date}' e dayOfWeek='${currentPlan.dayOfWeek}'.
- Recalcular todos os totais de macros e calorias.
${mealStructurePrompt}
${difficultyPrompt}
${adminInstructionPrompt}

Perfil do Usu√°rio: ${userProfileJSON}

Plano anterior para refer√™ncia (evitar repeti√ß√£o):
${JSON.stringify({ meals: currentPlan.meals.map(m => m.name) })}
`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: dailyPlanSchema,
                thinkingConfig: { thinkingBudget: 0 },
            },
        });

        const jsonText = response.text.trim();
        return JSON.parse(jsonText);

    } catch (error) {
        console.error("Error regenerating daily plan with AI:", error);
        throw new Error("N√£o foi poss√≠vel gerar uma nova dieta. A IA n√£o conseguiu processar o pedido.");
    }
};

export const adjustDailyPlanForMacro = async (
    userData: UserData,
    currentPlan: DailyPlan,
    macroToFix: keyof Omit<MacroData, 'calories'>
): Promise<DailyPlan> => {
    const currentMacroValue = currentPlan.totalMacros[macroToFix];
    const goalMacroValue = userData.macros[macroToFix].goal;
    const difference = goalMacroValue - currentMacroValue;
    const macroName = { protein: 'prote√≠na', carbs: 'carboidratos', fat: 'gordura' }[macroToFix];
    const objective = userData.weight > userData.weightGoal ? 'perder peso' : 'ganhar massa';

    const difficultyPrompt = userData.dietDifficulty === 'easy'
      ? `- Modo F√°cil: Prefira substitui√ß√µes/adi√ß√µes simples.`
      : userData.dietDifficulty === 'athlete'
      ? `- Modo Atleta: Ajuste usando fontes de prote√≠na magra ou carboidratos complexos.`
      : '';
      
    const adminInstructionPrompt = userData.adminSettings?.permanentPrompt
      ? `- Regra Permanente do Nutricionista (OBRIGAT√ìRIO): ${userData.adminSettings.permanentPrompt}`
      : '';

    const userContextJSON = JSON.stringify({
      objetivo: objective,
      metas_diarias: { calorias: userData.macros.calories.goal, proteinas: userData.macros.protein.goal, carboidratos: userData.macros.carbs.goal, gorduras: userData.macros.fat.goal }
    });

    const prompt = `
Tarefa: Ajuste cir√∫rgico em um plano alimentar para corrigir uma meta de macronutriente.
Sa√≠da: JSON completo e atualizado do plano, schema 'dailyPlanSchema'.

Problema:
- Ajustar: ${macroName}.
- Meta: ${goalMacroValue.toFixed(1)}g.
- Atual: ${currentMacroValue.toFixed(1)}g.
- A√ß√£o: ${difference > 0 ? `Adicionar ~${difference.toFixed(1)}g` : `Remover ~${Math.abs(difference).toFixed(1)}g`} de ${macroName}.

Regras:
- Fa√ßa a MENOR mudan√ßa poss√≠vel. N√£o regenere a dieta inteira.
- Priorize: 1) Ajustar por√ß√£o; 2) Substituir item; 3) Adicionar item pequeno.
- Minimize o impacto nas outras metas (calorias, etc.).
- Recalcule os totais da refei√ß√£o modificada e do dia.
${difficultyPrompt}
${adminInstructionPrompt}

Contexto do Usu√°rio: ${userContextJSON}

Plano para Modificar:
${JSON.stringify(currentPlan, null, 2)}
`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: dailyPlanSchema,
                thinkingConfig: { thinkingBudget: 0 },
            },
        });

        const jsonText = response.text.trim();
        return JSON.parse(jsonText);

    } catch (error) {
        console.error("Error adjusting daily plan with AI:", error);
        throw new Error(`N√£o foi poss√≠vel ajustar a meta de ${macroName}. A IA n√£o conseguiu processar o pedido.`);
    }
};


export const generateWeeklyPlan = async (userData: UserData, weekStartDate: Date, observation?: string): Promise<Record<string, DailyPlan>> => {
    const objective = userData.weight > userData.weightGoal ? 'perda de peso' : userData.weight < userData.weightGoal ? 'ganho de massa' : 'manuten√ß√£o de peso';

    const dateStrings = Array.from({ length: 7 }).map((_, i) => {
        const date = new Date(weekStartDate);
        date.setDate(date.getDate() + i);
        return date.toISOString().split('T')[0];
    });

    const dayNames = ['Domingo', 'Segunda-feira', 'Ter√ßa-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S√°bado'];
    
    const difficultyPrompt = userData.dietDifficulty === 'easy' 
        ? `- Modo F√°cil: Priorizar simplicidade e alimentos comuns.`
        : userData.dietDifficulty === 'athlete'
        ? `- Modo Atleta: Dietas ricas em prote√≠nas de alta qualidade e carboidratos complexos.`
        : '';

    const adminInstructionPrompt = userData.adminSettings?.permanentPrompt
      ? `- Regra Permanente do Nutricionista (OBRIGAT√ìRIO): ${userData.adminSettings.permanentPrompt}`
      : '';
      
    const observationPrompt = observation
      ? `- Observa√ß√£o do Usu√°rio (IMPORTANTE): ${observation}`
      : '';

    const userProfileJSON = JSON.stringify({
        objetivo: objective, meta_peso: userData.weightGoal,
        metas_diarias: { calorias: userData.macros.calories.goal, carboidratos: userData.macros.carbs.goal, proteinas: userData.macros.protein.goal, gorduras: userData.macros.fat.goal },
        preferencias: { dietas: userData.dietaryPreferences.diets.join(', ') || 'Nenhuma', restricoes: userData.dietaryPreferences.restrictions.join(', ') || 'Nenhuma' },
        perfil_base: { idade: userData.age, genero: userData.gender, altura: userData.height, peso: userData.weight, atividade: userData.activityLevel }
    });

    const prompt = `
Tarefa: Gerar plano alimentar variado para 7 dias.
Sa√≠da: JSON, schema 'weeklyPlanSchema'.
Regras:
- Para as datas: ${dateStrings.join(', ')}.
- In√≠cio em ${dateStrings[0]} (${dayNames[weekStartDate.getDay()]}).
- Alinhar estritamente com o perfil e metas do usu√°rio.
- Refei√ß√µes variadas a cada dia.
- Usar alimentos comuns no Brasil.
- Incluir por√ß√µes em formato "medida caseira (gramas)".
- Recalcular totais de macros e calorias para cada dia.
${difficultyPrompt}
${adminInstructionPrompt}
${observationPrompt}

Perfil do Usu√°rio: ${userProfileJSON}
`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: weeklyPlanSchema,
                thinkingConfig: { thinkingBudget: 0 },
            },
        });

        const jsonText = response.text.trim();
        const parsedResponse = JSON.parse(jsonText);
        const dailyPlans: DailyPlan[] = parsedResponse.weekly_plan;
        
        const planRecord: Record<string, DailyPlan> = {};
        dailyPlans.forEach(plan => {
            if (plan.date) {
                planRecord[plan.date] = plan;
            }
        });
        return planRecord;

    } catch (error) {
        console.error("Error generating weekly plan with AI:", error);
        throw new Error("N√£o foi poss√≠vel gerar uma dieta semanal. A IA n√£o conseguiu processar o pedido.");
    }
};


export const regenerateMealFromPrompt = async (prompt: string, meal: Meal, userData: UserData): Promise<Meal> => {
     const objective = userData.weight > userData.weightGoal ? 'perda de peso' : userData.weight < userData.weightGoal ? 'ganho de massa' : 'manuten√ß√£o de peso';

    const difficultyPrompt = userData.dietDifficulty === 'easy'
      ? `- **Modo F√°cil:** O usu√°rio prefere simplicidade.`
      : userData.dietDifficulty === 'athlete'
      ? `- **Modo Atleta:** D√™ prefer√™ncia a alimentos ricos em prote√≠na e carboidratos de qualidade para esta refei√ß√£o.`
      : '';
    
    const adminInstructionPrompt = userData.adminSettings?.permanentPrompt
      ? `- **Regra Permanente do Nutricionista (OBRIGAT√ìRIO):** ${userData.adminSettings.permanentPrompt}`
      : '';

    const systemPrompt = `Voc√™ √© um especialista em nutri√ß√£o. Sua tarefa √© regenerar uma refei√ß√£o com base no pedido do usu√°rio, alinhando-a perfeitamente ao perfil dele.
- Responda APENAS com um objeto JSON v√°lido que corresponda ao esquema fornecido. N√£o inclua nenhum texto ou markdown extra.

**Contexto do Usu√°rio:**
- **Perfil F√≠sico:** Idade: ${userData.age}, G√™nero: ${userData.gender}, Altura: ${userData.height}cm, Peso: ${userData.weight}kg.
- **Objetivo Geral:** ${objective}
- **Metas Di√°rias:** Calorias: ${userData.macros.calories.goal}kcal, Prote√≠nas: ${userData.macros.protein.goal}g, Carboidratos: ${userData.macros.carbs.goal}g, Gorduras: ${userData.macros.fat.goal}g.
- **Prefer√™ncias:** Dietas (${userData.dietaryPreferences.diets.join(', ') || 'Nenhuma'}), Restri√ß√µes (${userData.dietaryPreferences.restrictions.join(', ') || 'Nenhuma'}).

**Pedido do Usu√°rio para esta refei√ß√£o:** "${prompt}"

**Instru√ß√µes para a Nova Refei√ß√£o:**
${difficultyPrompt}
${adminInstructionPrompt}
- Analise a refei√ß√£o original: ${JSON.stringify(meal, null, 2)}.
- Com base no pedido do usu√°rio e no contexto dele, crie uma nova lista de itens para a refei√ß√£o.
- Tente manter o total de calorias da nova refei√ß√£o pr√≥ximo ao da original (${meal.totalCalories} kcal), mas priorize o alinhamento com o pedido e as metas di√°rias.
- **Importante:** Ao escolher novos alimentos, d√™ prefer√™ncia a ingredientes comuns na dieta brasileira.
- **Gramatura:** Para cada alimento, forne√ßa a por√ß√£o em medida caseira E o equivalente em gramas (ex: "1 x√≠cara (200g)").
- **CRUCIAL:** Recalcule os campos 'totalCalories' e 'totalMacros' da refei√ß√£o para refletir as novas escolhas.
- Mantenha os campos 'id', 'name' e 'time' da refei√ß√£o original, a menos que o usu√°rio pe√ßa explicitamente para alter√°-los.`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: systemPrompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: mealSchema,
                thinkingConfig: { thinkingBudget: 0 },
            },
        });

        const jsonText = response.text.trim();
        return JSON.parse(jsonText);

    } catch (error) {
        console.error("Error regenerating meal with AI:", error);
        throw new Error("N√£o foi poss√≠vel regenerar a refei√ß√£o. A IA n√£o conseguiu processar o pedido.");
    }
};

export const analyzeMealFromText = async (description: string): Promise<MacroData> => {
    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: `Analise a seguinte refei√ß√£o e retorne as informa√ß√µes nutricionais estimadas em formato JSON. Seja o mais preciso poss√≠vel. Refei√ß√£o: "${description}"`,
            config: {
              responseMimeType: "application/json",
              responseSchema: macroDataSchema,
               thinkingConfig: { thinkingBudget: 0 },
            },
         });
       
         const jsonText = response.text.trim();
         return JSON.parse(jsonText);

    } catch(error) {
        console.error("Error analyzing meal with AI:", error);
        throw new Error("N√£o foi poss√≠vel analisar a refei√ß√£o. Verifique a descri√ß√£o e tente novamente.");
    }
};

export const analyzeMealFromImage = async (imageDataUrl: string): Promise<MacroData> => {
    const parts = imageDataUrl.split(',');
    if (parts.length !== 2) throw new Error("Formato de URL de dados de imagem inv√°lido.");
    const mimeType = parts[0].split(';')[0].split(':')[1];
    const base64Data = parts[1];

    const imagePart = {
      inlineData: { mimeType, data: base64Data },
    };

    const textPart = {
        text: `Analise a refei√ß√£o nesta imagem e retorne as informa√ß√µes nutricionais estimadas em formato JSON. Seja o mais preciso poss√≠vel, considerando ingredientes comuns no Brasil. O JSON deve seguir o schema fornecido.`
    };

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: { parts: [imagePart, textPart] },
            config: {
              responseMimeType: "application/json",
              responseSchema: macroDataSchema,
              thinkingConfig: { thinkingBudget: 0 },
            },
         });
       
         const jsonText = response.text.trim();
         return JSON.parse(jsonText);

    } catch(error) {
        console.error("Error analyzing meal from image with AI:", error);
        throw new Error("N√£o foi poss√≠vel analisar a imagem. Tente uma foto mais clara ou com menos itens.");
    }
};

export const analyzeProgress = async (userData: UserData): Promise<string> => {
    const prompt = `
    Voc√™ √© um coach de sa√∫de e bem-estar. Analise os dados de progresso do usu√°rio e forne√ßa um resumo motivacional e construtivo.

    **Dados do Usu√°rio:**
    - **Nome:** ${userData.name}
    - **Objetivo de Peso:** Meta de ${userData.weightGoal.toFixed(1)} kg.
    - **Peso Inicial:** ${userData.initialWeight.toFixed(1)} kg.
    - **Peso Atual:** ${userData.weight.toFixed(1)} kg.
    - **Hist√≥rico de Peso (√∫ltimos 30 registros):** 
      ${(userData.weightHistory || []).slice(-30).map(h => `- ${new Date(h.date).toLocaleDateString('pt-BR')}: ${h.weight.toFixed(1)} kg`).join('\n ')}

    **Sua Tarefa:**
    1.  **Comece com uma sauda√ß√£o amig√°vel** usando o nome do usu√°rio.
    2.  **Analise a jornada do peso:** Calcule a altera√ß√£o total de peso desde o in√≠cio. Comente sobre a tend√™ncia geral (perda, ganho, manuten√ß√£o).
    3.  **Destaque as Vit√≥rias:** Encontre pontos positivos. O usu√°rio est√° sendo consistente? Houve uma queda/aumento significativo recente? Celebre qualquer progresso.
    4.  **Ofere√ßa Insights e Dicas:** Com base na tend√™ncia, ofere√ßa 1 ou 2 dicas pr√°ticas e acion√°veis. Se estiver perdendo peso, sugira como manter o ritmo. Se estiver estagnado, sugira como quebrar o plat√¥. Se estiver ganhando, d√™ dicas para ganho de massa magra.
    5.  **Termine com uma mensagem de encorajamento,** refor√ßando que a jornada √© uma maratona, n√£o uma corrida.

    Use Markdown para formatar a resposta, incluindo negrito e listas para melhor legibilidade. Use um tom positivo e de apoio.
    `;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
        });
        return response.text;
    } catch (error) {
        console.error("Error analyzing progress with AI:", error);
        throw new Error("N√£o foi poss√≠vel gerar a an√°lise de progresso no momento.");
    }
};

export const generateShoppingList = async (weekPlan: DailyPlan[]): Promise<string> => {
    const prompt = `Voc√™ √© um assistente de organiza√ß√£o de compras. Sua tarefa √© criar uma lista de compras consolidada e organizada a partir de uma dieta semanal.

**Dieta da Semana:**
${JSON.stringify(weekPlan, null, 2)}

**Sua Tarefa (CR√çTICO):**
1.  **Analise todos os itens** de todas as refei√ß√µes de todos os dias do plano fornecido.
2.  **Generalize Itens Similares:** Combine varia√ß√µes do mesmo ingrediente em um √∫nico item gen√©rico, somando suas quantidades. Por exemplo, 'feij√£o carioca' e 'feij√£o preto' devem ser combinados e listados simplesmente como 'Feij√£o'. Fa√ßa o mesmo para outros itens como 'arroz branco' e 'arroz integral' (listar como 'Arroz'), ou 'ma√ß√£ fuji' e 'ma√ß√£ gala' (listar como 'Ma√ß√£').
3.  **Agregue as quantidades** dos ingredientes j√° generalizados. Some todas as por√ß√µes do mesmo alimento (ex: "Frango" na segunda + "Frango" na quarta). Se as unidades forem diferentes (ex: g e ml), mantenha-as separadas ou fa√ßa a convers√£o mais l√≥gica.
4.  **Organize a lista final em categorias de supermercado** para facilitar as compras. Use as seguintes categorias e adicione outras se necess√°rio:
    - ## üçé Hortifr√∫ti (Frutas, Verduras, Legumes)
    - ## ü•© A√ßougue e Peixaria
    - ## üßÄ Latic√≠nios e Frios
    - ## üçû Padaria e Cereais
    - ## ü•´ Mercearia (Gr√£os, Enlatados, √ìleos, Temperos, etc.)
    - ## ‚ùÑÔ∏è Congelados
    - ## üíß Bebidas
5.  **Formate a sa√≠da** usando Markdown, com os t√≠tulos das categorias em H2 (##) e os itens da lista com marcadores (-). Para cada item, coloque a quantidade total e o nome do item. Ex: "- 500g de Fil√© de Frango".

Seja claro, conciso e organizado. A lista deve ser pr√°tica para o usu√°rio levar ao supermercado.
`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
        });
        return response.text;
    } catch (error) {
        console.error("Error generating shopping list with AI:", error);
        throw new Error("N√£o foi poss√≠vel gerar a lista de compras no momento.");
    }
};

export const getFoodInfo = async (question: string, mealContext?: Meal): Promise<string> => {
    const contextPrompt = mealContext
      ? `A pergunta do usu√°rio pode ser sobre um alimento dentro do contexto da seguinte refei√ß√£o: ${mealContext.name}, que cont√©m: ${mealContext.items.map(i => i.name).join(', ')}. Use este contexto para enriquecer sua resposta se for relevante.`
      : '';

    const prompt = `Voc√™ √© um assistente de nutri√ß√£o prestativo e amig√°vel. Responda √† seguinte pergunta do usu√°rio sobre alimentos de forma clara, concisa, e f√°cil de entender. Sua resposta deve ser em portugu√™s do Brasil. Use Markdown para formatar a resposta se ajudar na clareza (listas, negrito).
${contextPrompt}

Pergunta do usu√°rio: "${question}"`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: FAST_MODEL,
            contents: prompt,
        });
        return response.text;
    } catch (error) {
        console.error("Error getting food info with AI:", error);
        throw new Error("N√£o foi poss√≠vel obter a informa√ß√£o no momento.");
    }
};

export const getFoodSubstitution = async (itemToSwap: FoodItem, mealContext: Meal, userData: UserData): Promise<FoodItem> => {
    const prompt = `
    Tarefa: Encontrar um substituto para um item alimentar.
    Sa√≠da: APENAS o objeto JSON do novo item, conforme o schema 'foodItemSchema'.
    
    Contexto:
    - Usu√°rio quer trocar: ${itemToSwap.name} (${itemToSwap.portion}).
    - Dentro da refei√ß√£o: "${mealContext.name}".
    - Outros itens na refei√ß√£o: ${mealContext.items.filter(i => i.name !== itemToSwap.name).map(i => i.name).join(', ') || 'Nenhum'}.
    - Prefer√™ncias do usu√°rio: Dietas (${userData.dietaryPreferences.diets.join(', ') || 'Nenhuma'}), Restri√ß√µes (${userData.dietaryPreferences.restrictions.join(', ') || 'Nenhuma'}).

    Regras:
    1.  Encontre UM substituto nutricionalmente similar (calorias, macros).
    2.  O substituto deve ser um alimento comum no Brasil e fazer sentido no contexto da refei√ß√£o.
    3.  A por√ß√£o do novo item deve ser clara, com medida caseira e gramas.
    4.  Calcule os macros e calorias para o novo item.
    `;

    try {
        const ai = getAi();
         const response = await ai.models.generateContent({
            model: FAST_MODEL,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: foodItemSchema,
                thinkingConfig: { thinkingBudget: 0 },
            },
        });
        const jsonText = response.text.trim();
        return JSON.parse(jsonText);
    } catch (error) {
        console.error("Error getting food substitution with AI:", error);
        throw new Error("N√£o foi poss√≠vel encontrar um substituto.");
    }
}

export const generateImageFromPrompt = async (prompt: string): Promise<string> => {
    try {
        const ai = getAi();
        const response = await ai.models.generateImages({
            model: IMAGE_GENERATION_MODEL,
            prompt: `Crie uma imagem realista e de alta qualidade com base na seguinte descri√ß√£o: ${prompt}. Estilo de fotografia de alimentos, ilumina√ß√£o profissional, fundo desfocado.`,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("A IA n√£o retornou nenhuma imagem.");
        }
    } catch(error) {
        console.error("Error generating image with AI:", error);
        if (error instanceof Error && error.message.includes('SAFETY')) {
             throw new Error("N√£o foi poss√≠vel gerar a imagem devido √†s pol√≠ticas de seguran√ßa. Tente um prompt diferente.");
        }
        throw new Error("N√£o foi poss√≠vel gerar a imagem no momento.");
    }
};

export const findRecipes = async (query: string, userData: UserData, numRecipes: number = 3): Promise<Recipe[]> => {
    const objective = userData.weight > userData.weightGoal ? 'perda de peso' : userData.weight < userData.weightGoal ? 'ganho de massa' : 'manuten√ß√£o de peso';
    
    const adminInstructionPrompt = userData.adminSettings?.permanentPrompt
      ? `- Regra Permanente do Nutricionista (OBRIGAT√ìRIO): ${userData.adminSettings.permanentPrompt}`
      : '';

    const userContextJSON = JSON.stringify({
        objetivo: objective,
        preferencias: { dietas: userData.dietaryPreferences.diets.join(', ') || 'Nenhuma', restricoes: userData.dietaryPreferences.restrictions.join(', ') || 'Nenhuma' }
    });

    const prompt = `
Tarefa: Encontrar ${numRecipes} receita(s) criativa(s).
Sa√≠da: JSON, schema 'recipeSchema'.
Busca do Usu√°rio: "${query}"

Contexto do Perfil: ${userContextJSON}

Regras:
- Relev√¢ncia m√°xima com a busca do usu√°rio.
- Adaptar receitas para serem saud√°veis e respeitar o perfil.
- Priorizar ingredientes comuns no Brasil.
- Para cada receita, criar um 'imagePrompt' detalhado e otimizado para IA de imagem (estilo fotografia de comida realista, apetitosa, alta qualidade).
${adminInstructionPrompt}
`;

    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: DATA_GENERATION_MODEL,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: recipeSchema,
                thinkingConfig: { thinkingBudget: 0 },
            },
        });

        const jsonText = response.text.trim();
        const parsedResponse = JSON.parse(jsonText);
        return parsedResponse.recipes || [];

    } catch (error) {
        console.error("Error finding recipes with AI:", error);
        throw new Error("N√£o foi poss√≠vel encontrar receitas. A IA n√£o conseguiu processar o pedido.");
    }
};

export const analyzeActivityFromText = async (description: string): Promise<{ type: string; duration: number; caloriesBurned: number; }> => {
    try {
        const ai = getAi();
        const response = await ai.models.generateContent({
            model: FAST_MODEL,
            contents: `Analise o seguinte resumo de atividade f√≠sica e extraia as informa√ß√µes em formato JSON. O resumo pode vir de apps como Strava ou Apple Fitness. Exemplo: "Corrida da manh√£ - 5.2 km em 31 minutos. Gasto cal√≥rico de 350 kcal."
            
            Resumo: "${description}"`,
            config: {
              responseMimeType: "application/json",
              responseSchema: activityLogSchema,
              thinkingConfig: { thinkingBudget: 0 },
            },
         });
       
         const jsonText = response.text.trim();
         return JSON.parse(jsonText);

    } catch(error) {
        console.error("Error analyzing activity with AI:", error);
        throw new Error("N√£o foi poss√≠vel analisar a atividade. Verifique a descri√ß√£o e tente novamente.");
    }
};